(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{191:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"css-预处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-预处理","aria-hidden":"true"}},[s._v("#")]),s._v(" CSS 预处理")]),s._v(" "),a("p",[s._v("CSS 预处理器是一种脚本语言，用一种专门的编程语言来进行 Web 页面样式设计，然后再转换为正常的 CSS 样式，进而实现构建动态 CSS 样式。\nCSS 预处理器为 CSS 增加了一些编程的特性，无需考虑浏览器的兼容性问题\n常用的预处理有 less、sass、和 stylus 语言")]),s._v(" "),a("ol",[a("li",[s._v("Sass")])]),s._v(" "),a("p",[s._v("Sass 是对 CSS（层叠样式表）的语法的一种扩充，诞生于 2007 年，最早也是最成熟的一款 CSS 预处理器语言，它可以使用变量、常量、嵌套、混入、函数等功能，可以更有效有弹性的写出 CSS。Sass 最后还是会编译出合法的 CSS 让浏览器使用，也就是说它本身的语法并不太容易让浏览器识别，因为它不是标准的 CSS 格式，在它的语法内部可以使用动态变量等，所以它更像一种极简单的动态语言。")]),s._v(" "),a("p",[s._v("其实现在的 Sass 已经有了两套语法规则：一个依旧是用缩进作为分隔符来区分代码块的；另一套规则和 CSS 一样采用了大括号（｛｝）作为分隔符。后一种语法规则又名 SCSS，在 Sass3 之后的版本都支持这种语法规则。")]),s._v(" "),a("p",[s._v("Sass 是 Ruby 语言写的，但是两者的语法没有关系。不懂 Ruby，照样可以正常使用 Sass。只是必须先安装 Ruby，然后再安装 Sass。")]),s._v(" "),a("p",[s._v("首先安装 Ruby，如果你使用的是 IOS 系统，那么你的系统已经安装好了 Ruby。如果你使用的是微软的 Windows 系统，那么安装就有些许的麻烦")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("LESS")])]),s._v(" "),a("p",[s._v("LESS 的安装和 Sass 安装有所不同，他不需要依赖于 Ruby 环境，就能直接安装使用。不过 LESS 安装分为两种：客户端和服务器端安装。")]),s._v(" "),a("p",[s._v("2.1 客户端安装")]),s._v(" "),a("p",[s._v("我们可以直接在客户端使用“.less”（LESS 源文件），只需要在官网载一个 Javascript 脚本文件主“less.js”，然后在我们需要引入 LESS 源文件的 HTML 的")]),a("head",[s._v("中加入如下代码："),a("p"),s._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("link")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("stylesheet/less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("text/css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("文件路径/styles.less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("script")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("文件路径/less.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("text/javascript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])])]),a("p",[s._v("需要注意的是：在引入“.less”文件中，“link”的“rel”属性要设置为“stylesheet/less”。还有更重要的一点需要注意的是：LESS 源文件一定要在“less.js”引入之前引入，这样才能保证 LESS 源文件正确编译解析。")]),s._v(" "),a("p",[s._v("2.2 服务器端安装")]),s._v(" "),a("p",[s._v("LESS 在服务器端的使用主要是借助于 LESS 的编译器，将 LESS 源文件编译生成最终的 CSS 文件，目前常用的方式是利用 node 的包管理器（npm）安装 LESS，安装成功后就可以在 Node 环境中对 LESS 文件进行编译。如此一来，LESS 在服务器的安装和 Sass 的安装有点相似，不同之处是他们需依赖的环境不一样，LESS 需要的是 Node JS 环境，而 Sass 需要的是 Ruby 环境")]),s._v(" "),a("p",[s._v("3.Stylus")]),s._v(" "),a("p",[s._v("Stylus，2010 年产生，来自于 Node.js 社区，主要用来给 Node 项目进行 CSS 预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如 Sass 和 LESS。")]),s._v(" "),a("p",[s._v("Stylus 被称为是一种革命性的新语言，提供一个高效、动态、和使用表达方式来生成 CSS，以供浏览器使用。Stylus 同时支持缩进和 CSS 常规样式书写规则。")]),s._v(" "),a("p",[s._v("注："),a("a",{attrs:{href:"http://learnboost.github.com/stylus",target:"_blank",rel:"noopener noreferrer"}},[s._v("Stylus 官网"),a("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=e.exports}}]);